/*
 * Copyright (c) 2021 jdlib, https://github.com/jdlib
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated from ExpectProtected.txt, see build.xml/target[name="generate"]. 
// Do not modify directly.
package deepdive;


import javax.annotation.CheckReturnValue;
import deepdive.function.CheckedConsumer;
import deepdive.function.CheckedRunnable;
import deepdive.impl.ExpectResult;
import deepdive.impl.Not;
import deepdive.impl.Value;


/**
 * ExpectProtected provides assert methods to test expectations on actual values.
 * All assert methods are protected therefore you need to derive your test
 * class from ExpectProtected in order to access them.
 * The main use is Actual which provides a public fluent assertion API
 * for a domain class and internally can implement those methods using
 * the assertion methods inherited from ExpectProtected.
 */
public class ExpectProtected extends Checkpoint
{
@expectTemplate@

	
	/**
	 * Toogles not mode.
	 * @return this
	 */
	@CheckReturnValue
	protected ExpectProtected not()
	{
		notHolder_.toggle();
		return this;
	}
	
	
	protected final Not getNotAndClear()
	{
		return notHolder_.getAndClear();
	}


	protected Not.Holder getNotHolder()
	{
		return notHolder_;
	}


	private final Not.Holder notHolder_ = new Not.Holder();
}
